name: On PR

on:
  pull_request

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      app: ${{ steps.filter.outputs.app }}
      docs: ${{ steps.filter.outputs.docs }}
      ui: ${{ steps.filter.outputs.ui }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        # Added all possible filters even if we just use app and ui
        filters: |
          app:
            - 'app/**'
          docs:
            - 'doc/**'
          ui:
            - 'app/ui-react/**'
            - 'package.json'
            - 'yarn.lock'
            - 'node_modules/**'


  full-pr-build:
    needs: changes
    if: ${{ needs.changes.outputs.app == 'true' || needs.changes.outputs.ui == 'true' }}
    runs-on: ubuntu-latest
    env:
      IMAGES_DIR: syndesis_images
      COMMIT_ID: ${{ github.event.pull_request.head.sha }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Display Space Availability
        run: |
          echo Space of VM ...
          df -h
          echo Space in Docker ...
          docker system df
        continue-on-error: true
      - name: Full Build of Syndesis with Tests and Checks
        run: tools/bin/syndesis build -d --batch-mode --all-images --docker
      - name: images
        run: docker images
      - name: Display Space Availability After Build
        run: |
          echo Space of VM ...
          df -h
          echo Space in Docker ...
          docker system df
        continue-on-error: true
      - name: Cleanup Working Directory
        run : |
          cd /home/runner
          # Remove large working directories used to build images
          rm -rf .cache
          rm -rf .m2
          rm -rf work/syndesis/syndesis/app/ui-react/node_modules
          rm -rf work/syndesis/syndesis/app/ui-react/packages
      - name: docker save
        run: |
          mkdir $IMAGES_DIR
          IMAGES=`docker images --filter=reference='syndesis/syndesis-*' --format "{{.Repository}}"`
          for image in $IMAGES
          do
            echo Saving $image ..
            COMPONENT=$(echo $image | cut -d '/' -f 2)
            echo $image -> $IMAGES_DIR/$COMPONENT.tar
            docker save $image | gzip > $IMAGES_DIR/$COMPONENT.tar.gz
            # Clean up the image now its been extracted
            docker rmi $image
          done
          echo "{ \"run_id\": \"$GITHUB_RUN_ID\", \"github_pr_id\": \"$PR_NUMBER\", \"commit_id\": \"$COMMIT_ID\" }" > $IMAGES_DIR/github-metadata.json
      - name: env
        run: env
      - name: Saving docker images
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.IMAGES_DIR }}
          path: ${{ env.IMAGES_DIR }}
          retention-days: 1
      - name: notify quay
        uses: satak/webrequest-action@master
        with:
          url: 'https://ci.fabric8.io/generic-webhook-trigger/invoke?token=syndesis-github-to-quay'
          method: POST
          payload: '{"run_id":"${{ github.run_id }}", "github_pr_id": "${{ env.PR_NUMBER }}", "commit_id": "${{ env.COMMIT_ID }}" }'
      # Send SonarCloud statistics
      - name: Set up JDK 11 for SonarCloud
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Install Java 11
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{env.SONAR_TOKEN != ''}}
        uses: AdoptOpenJDK/install-jdk@v1
        with:
          version: '11'
      - name: Send analysis to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{env.SONAR_TOKEN != ''}}
        run: cd app; ./mvnw -q -B -pl '!:extension-bom,!:integration-bom' jacoco:report && ./mvnw -B -N -Dsonar.login=${{secrets.SONAR_TOKEN}} sonar:sonar -Dsonar.sources=$(find . -wholename "*/src/main/java" | sed -z 's/\n/,/g;s/,$/\n/') -Dsonar.java.binaries=$(find . -wholename "*/target/classes" | sed -z 's/\n/,/g;s/,$/\n/')
